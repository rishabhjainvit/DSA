#include <iostream>
using namespace std;

bool Sorted(int arr[], int n){
  if(n==0 || n==1){
    return true;
  }
  if(arr[0]>arr[1]){
    return false;
  }
  else{
    bool remaingpart =  isSorted(arr+1, n-1);
    return remaingpart;
  }
}


int main(){
  int arr[5] ={2,4,6,8,9};
  int n=5;
  bool ans = isSorted(arr,n);
  if(ans){
    cout<<"array is sorrted"<<endl;
  }
  else{
    cout<,"array is not sorted "<<endl;
  }
  return 0;
}

||| SUM OF ARRAY USING RECURSION

#include <iostream>
using namespace std;

int getSum(int *arr , int size){
  if(size == 0){
    return 0;
  }
  if(size == 1){
    return arr[0];
  }
  int remPart = getSum(arr+1,size-1);
  int sum = arr[0] + remPart;
  return sum;
  
  
}

int main(){
  int arr[5] ={2,4,6,8,9};
  int size =5;
  int sum = getSum(arr,size);
  cout<<"Sum is" << sum <<endl;
  return 0;
}

/// finding number prent in array or not using recursion 
#include <iostream>
using namespace std;

bool linearsearch(int arr[], int size , int k){
  if(size==0){
    return false;
  }
  if(arr[0]==k){
    return true;
  }else{
    bool remainingpart=linearsearch(arr+1,size-1,k);
    return remainingpart;
  }
}

int main(){
  int arr[5] ={2,4,6,8,9};
  int size =5;
  int key=10;
  bool ans=linearsearch(arr,size,key);
  if(ans){
    cout<<"present"<<endl;
  }
  else{
    cout<<"absent"<<endl;
  }
  return 0;
}
